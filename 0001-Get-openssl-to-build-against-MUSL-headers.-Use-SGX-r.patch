From b13f4b855fa4fb2d4d833519ade9f2d79fb963cd Mon Sep 17 00:00:00 2001
From: radhikaj <radhikaj@microsoft.com>
Date: Tue, 21 May 2019 21:42:19 +0000
Subject: [PATCH] Get openssl to build against MUSL headers. Use SGX rand
 functions

Change pkgconfig files generated to have _oe_enclave suffixes
---
 Configurations/unix-Makefile.tmpl | 50 ++++++++++++-------------
 crypto/mem_sec.c                  |  2 +-
 crypto/rand/drbg_lib.c            | 15 +++++++-
 crypto/rand/rand_lib.c            | 78 ++++++++++++++++++++++++++-------------
 4 files changed, 93 insertions(+), 52 deletions(-)

diff --git a/Configurations/unix-Makefile.tmpl b/Configurations/unix-Makefile.tmpl
index 288b792..3801a94 100644
--- a/Configurations/unix-Makefile.tmpl
+++ b/Configurations/unix-Makefile.tmpl
@@ -348,7 +348,7 @@ LANG=C
 {- dependmagic('build_programs'); -}: build_programs_nodep
 
 build_generated: $(GENERATED_MANDATORY)
-build_libs_nodep: libcrypto.pc libssl.pc openssl.pc
+build_libs_nodep: libcrypto_oe_enclave.pc libssl_oe_enclave.pc openssl_oe_enclave.pc
 build_engines_nodep: $(ENGINES)
 build_programs_nodep: $(PROGRAMS) $(SCRIPTS)
 
@@ -419,7 +419,7 @@ clean: libclean
 	$(RM) core
 	$(RM) tags TAGS doc-nits
 	$(RM) -r test/test-runs
-	$(RM) openssl.pc libcrypto.pc libssl.pc
+	$(RM) openssl_oe_enclave.pc libcrypto_oe_enclave.pc libssl_oe_enclave.pc
 	-$(RM) `find . -name .git -prune -o -type l -print`
 	$(RM) $(TARFILE)
 
@@ -554,15 +554,15 @@ install_dev: install_runtime_libs
 	done
 	@ : {- output_on() if $disabled{shared}; "" -}
 	@$(PERL) $(SRCDIR)/util/mkdir-p.pl $(DESTDIR)$(libdir)/pkgconfig
-	@$(ECHO) "install libcrypto.pc -> $(DESTDIR)$(libdir)/pkgconfig/libcrypto.pc"
-	@cp libcrypto.pc $(DESTDIR)$(libdir)/pkgconfig
-	@chmod 644 $(DESTDIR)$(libdir)/pkgconfig/libcrypto.pc
-	@$(ECHO) "install libssl.pc -> $(DESTDIR)$(libdir)/pkgconfig/libssl.pc"
-	@cp libssl.pc $(DESTDIR)$(libdir)/pkgconfig
-	@chmod 644 $(DESTDIR)$(libdir)/pkgconfig/libssl.pc
-	@$(ECHO) "install openssl.pc -> $(DESTDIR)$(libdir)/pkgconfig/openssl.pc"
-	@cp openssl.pc $(DESTDIR)$(libdir)/pkgconfig
-	@chmod 644 $(DESTDIR)$(libdir)/pkgconfig/openssl.pc
+	@$(ECHO) "install libcrypto_oe_enclave.pc -> $(DESTDIR)$(libdir)/pkgconfig/libcrypto_oe_enclave.pc"
+	@cp libcrypto_oe_enclave.pc $(DESTDIR)$(libdir)/pkgconfig
+	@chmod 644 $(DESTDIR)$(libdir)/pkgconfig/libcrypto_oe_enclave.pc
+	@$(ECHO) "install libssl_oe_enclave.pc -> $(DESTDIR)$(libdir)/pkgconfig/libssl_oe_enclave.pc"
+	@cp libssl_oe_enclave.pc $(DESTDIR)$(libdir)/pkgconfig
+	@chmod 644 $(DESTDIR)$(libdir)/pkgconfig/libssl_oe_enclave.pc
+	@$(ECHO) "install openssl_oe_enclave.pc -> $(DESTDIR)$(libdir)/pkgconfig/openssl_oe_enclave.pc"
+	@cp openssl_oe_enclave.pc $(DESTDIR)$(libdir)/pkgconfig
+	@chmod 644 $(DESTDIR)$(libdir)/pkgconfig/openssl_oe_enclave.pc
 
 uninstall_dev: uninstall_runtime_libs
 	@$(ECHO) "*** Uninstalling development files"
@@ -602,9 +602,9 @@ uninstall_dev: uninstall_runtime_libs
 		: {- output_on() unless windowsdll(); "" -}; \
 	done
 	@ : {- output_on() if $disabled{shared}; "" -}
-	$(RM) $(DESTDIR)$(libdir)/pkgconfig/libcrypto.pc
-	$(RM) $(DESTDIR)$(libdir)/pkgconfig/libssl.pc
-	$(RM) $(DESTDIR)$(libdir)/pkgconfig/openssl.pc
+	$(RM) $(DESTDIR)$(libdir)/pkgconfig/libcrypto_oe_enclave.pc
+	$(RM) $(DESTDIR)$(libdir)/pkgconfig/libssl_oe_enclave.pc
+	$(RM) $(DESTDIR)$(libdir)/pkgconfig/openssl_oe_enclave.pc
 	-$(RMDIR) $(DESTDIR)$(libdir)/pkgconfig
 	-$(RMDIR) $(DESTDIR)$(libdir)
 
@@ -848,8 +848,8 @@ FORCE:
 
 # Building targets ###################################################
 
-libcrypto.pc libssl.pc openssl.pc: configdata.pm $(LIBS) {- join(" ",map { shlib_simple($_) } @{$unified_info{libraries}}) -}
-libcrypto.pc:
+libcrypto_oe_enclave.pc libssl_oe_enclave.pc openssl_oe_enclave.pc: configdata.pm $(LIBS) {- join(" ",map { shlib_simple($_) } @{$unified_info{libraries}}) -}
+libcrypto_oe_enclave.pc:
 	@ ( echo 'prefix=$(INSTALLTOP)'; \
 	    echo 'exec_prefix=$${prefix}'; \
 	    if [ -n "$(LIBDIR)" ]; then \
@@ -860,14 +860,14 @@ libcrypto.pc:
 	    echo 'includedir=$${prefix}/include'; \
 	    echo 'enginesdir=$${libdir}/engines-{- $sover_dirname -}'; \
 	    echo ''; \
-	    echo 'Name: OpenSSL-libcrypto'; \
+	    echo 'Name: OpenSSL-libcrypto_oe_enclave'; \
 	    echo 'Description: OpenSSL cryptography library'; \
 	    echo 'Version: '$(VERSION); \
 	    echo 'Libs: -L$${libdir} -lcrypto'; \
 	    echo 'Libs.private: $(LIB_EX_LIBS)'; \
-	    echo 'Cflags: -I$${includedir}' ) > libcrypto.pc
+	    echo 'Cflags: -I$${includedir}' ) > libcrypto_oe_enclave.pc
 
-libssl.pc:
+libssl_oe_enclave.pc:
 	@ ( echo 'prefix=$(INSTALLTOP)'; \
 	    echo 'exec_prefix=$${prefix}'; \
 	    if [ -n "$(LIBDIR)" ]; then \
@@ -877,14 +877,14 @@ libssl.pc:
 	    fi; \
 	    echo 'includedir=$${prefix}/include'; \
 	    echo ''; \
-	    echo 'Name: OpenSSL-libssl'; \
+	    echo 'Name: OpenSSL-libssl_oe_enclave'; \
 	    echo 'Description: Secure Sockets Layer and cryptography libraries'; \
 	    echo 'Version: '$(VERSION); \
-	    echo 'Requires.private: libcrypto'; \
+	    echo 'Requires.private: libcrypto_oe_enclave'; \
 	    echo 'Libs: -L$${libdir} -lssl'; \
-	    echo 'Cflags: -I$${includedir}' ) > libssl.pc
+	    echo 'Cflags: -I$${includedir}' ) > libssl_oe_enclave.pc
 
-openssl.pc:
+openssl_oe_enclave.pc:
 	@ ( echo 'prefix=$(INSTALLTOP)'; \
 	    echo 'exec_prefix=$${prefix}'; \
 	    if [ -n "$(LIBDIR)" ]; then \
@@ -894,10 +894,10 @@ openssl.pc:
 	    fi; \
 	    echo 'includedir=$${prefix}/include'; \
 	    echo ''; \
-	    echo 'Name: OpenSSL'; \
+	    echo 'Name: OpenSSL_oe_enclave'; \
 	    echo 'Description: Secure Sockets Layer and cryptography libraries and tools'; \
 	    echo 'Version: '$(VERSION); \
-	    echo 'Requires: libssl libcrypto' ) > openssl.pc
+	    echo 'Requires: libssl_oe_enclave libcrypto_oe_enclave' ) > openssl_oe_enclave.pc
 
 configdata.pm: $(SRCDIR)/Configure $(SRCDIR)/config {- join(" ", @{$config{build_file_templates}}, @{$config{build_infos}}, @{$config{conf_files}}) -}
 	@echo "Detected changed: $?"
diff --git a/crypto/mem_sec.c b/crypto/mem_sec.c
index 9e0f670..3111da7 100644
--- a/crypto/mem_sec.c
+++ b/crypto/mem_sec.c
@@ -30,7 +30,7 @@
 # if defined(OPENSSL_SYS_LINUX)
 #  include <sys/syscall.h>
 #  if defined(SYS_mlock2)
-#   include <linux/mman.h>
+#   include <sys/mman.h>
 #   include <errno.h>
 #  endif
 # endif
diff --git a/crypto/rand/drbg_lib.c b/crypto/rand/drbg_lib.c
index a132821..0317e8a 100644
--- a/crypto/rand/drbg_lib.c
+++ b/crypto/rand/drbg_lib.c
@@ -1144,6 +1144,18 @@ RAND_DRBG *RAND_DRBG_get0_private(void)
     return drbg;
 }
 
+int sgx_rand_status(void);
+int get_sgx_rand_bytes(unsigned char* buf, int num);
+
+RAND_METHOD sgxssl_rand_meth2 = {
+    NULL, /* seed */
+    get_sgx_rand_bytes,
+    NULL, /* cleanup */
+    NULL, /* add */
+    get_sgx_rand_bytes,
+    sgx_rand_status,
+};
+
 RAND_METHOD rand_meth = {
     drbg_seed,
     drbg_bytes,
@@ -1155,5 +1167,6 @@ RAND_METHOD rand_meth = {
 
 RAND_METHOD *RAND_OpenSSL(void)
 {
-    return &rand_meth;
+    return &sgxssl_rand_meth2;
 }
+
diff --git a/crypto/rand/rand_lib.c b/crypto/rand/rand_lib.c
index d8639c4..2c0f667 100644
--- a/crypto/rand/rand_lib.c
+++ b/crypto/rand/rand_lib.c
@@ -17,6 +17,41 @@
 #include "rand_lcl.h"
 #include "e_os.h"
 
+static int sgx_read_rand(uint8_t *buf, size_t size)
+{
+    uint32_t i;
+    for(i=0;i<(uint32_t)size;++i){
+        buf[i]=(uint8_t)rand();
+    }
+    return 0;
+}
+
+static int sgxssl_read_rand(unsigned char *rand_buf, int length_in_bytes) {
+
+  int ret;
+
+  if (rand_buf == NULL || length_in_bytes <= 0) {
+    return 1;
+  }
+
+  ret = sgx_read_rand(rand_buf, length_in_bytes);
+  if (ret != 0) {
+    return 1;
+  }
+
+  return 0;
+}
+
+int sgx_rand_status(void) { return 1; }
+
+int get_sgx_rand_bytes(unsigned char *buf, int num) {
+  if (sgxssl_read_rand(buf, num) == 0) {
+    return 1;
+  } else {
+    return 0;
+  }
+}
+
 #ifndef OPENSSL_NO_ENGINE
 /* non-NULL if default_RAND_meth is ENGINE-provided */
 static ENGINE *funct_ref;
@@ -733,35 +768,27 @@ int RAND_set_rand_method(const RAND_METHOD *meth)
     CRYPTO_THREAD_unlock(rand_meth_lock);
     return 1;
 }
+int sgx_rand_status(void);
+int get_sgx_rand_bytes(unsigned char *buf, int num);
+
+RAND_METHOD sgxssl_rand_meth = {
+    NULL,                       /* seed */
+    get_sgx_rand_bytes,
+    NULL,                       /* cleanup */
+    NULL,                       /* add */
+    get_sgx_rand_bytes,
+    sgx_rand_status,
+};
 
 const RAND_METHOD *RAND_get_rand_method(void)
 {
-    const RAND_METHOD *tmp_meth = NULL;
-
-    if (!RUN_ONCE(&rand_init, do_rand_init))
-        return NULL;
-
-    CRYPTO_THREAD_write_lock(rand_meth_lock);
-    if (default_RAND_meth == NULL) {
-#ifndef OPENSSL_NO_ENGINE
-        ENGINE *e;
-
-        /* If we have an engine that can do RAND, use it. */
-        if ((e = ENGINE_get_default_RAND()) != NULL
-                && (tmp_meth = ENGINE_get_RAND(e)) != NULL) {
-            funct_ref = e;
-            default_RAND_meth = tmp_meth;
-        } else {
-            ENGINE_finish(e);
-            default_RAND_meth = &rand_meth;
-        }
-#else
-        default_RAND_meth = &rand_meth;
-#endif
+    //Default SGXSSL will always use RDRAND engine (sgx_get_rand()).
+    //Thread lock removed due to performance drop it cause. (Lock mechanism result many enclave EENTER/EEXIT)
+    //
+    if (!default_RAND_meth) {
+        default_RAND_meth = &sgxssl_rand_meth;
     }
-    tmp_meth = default_RAND_meth;
-    CRYPTO_THREAD_unlock(rand_meth_lock);
-    return tmp_meth;
+    return default_RAND_meth;
 }
 
 #ifndef OPENSSL_NO_ENGINE
@@ -857,3 +884,4 @@ int RAND_status(void)
         return meth->status();
     return 0;
 }
+
-- 
2.7.4

