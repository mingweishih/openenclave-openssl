From 2b89981b91276f9a199168410ccafe72019a1f13 Mon Sep 17 00:00:00 2001
From: radhikaj <radhikaj@microsoft.com>
Date: Thu, 23 May 2019 22:51:21 +0000
Subject: [PATCH] Add oe_once recursive lock

---
 enclave/core/sgx/once.c | 29 +++++++++++++++++------------
 1 file changed, 17 insertions(+), 12 deletions(-)

diff --git a/enclave/core/sgx/once.c b/enclave/core/sgx/once.c
index 43bf0f8..14f4089 100644
--- a/enclave/core/sgx/once.c
+++ b/enclave/core/sgx/once.c
@@ -1,3 +1,4 @@
+
 // Copyright (c) Microsoft Corporation. All rights reserved.
 // Licensed under the MIT License.
 
@@ -5,33 +6,37 @@
 #include <openenclave/internal/thread.h>
 #include <openenclave/internal/utils.h>
 
+#define SPINLOCK_UNINITIALIZED 0
+#define SPINLOCK_BUSY 1
+#define SPINLOCK_USED 2
+
+
 oe_result_t oe_once(oe_once_t* once, void (*func)(void))
 {
     if (!once)
         return OE_INVALID_PARAMETER;
 
     /* Double checked locking (DCLP). */
-    oe_once_t o = *once;
-
     /* DCLP Acquire barrier. */
     OE_ATOMIC_MEMORY_BARRIER_ACQUIRE();
-    if (o == 0)
+    if (*once != SPINLOCK_USED)
     {
-        static oe_spinlock_t _lock = OE_SPINLOCK_INITIALIZER;
-
-        oe_spin_lock(&_lock);
-
-        if (*once == 0)
+        oe_once_t retval = __sync_val_compare_and_swap(once, SPINLOCK_UNINITIALIZED, SPINLOCK_BUSY);
+        if (retval == SPINLOCK_UNINITIALIZED)
         {
             if (func)
                 func();
 
-            /* DCLP Release barrier. */
             OE_ATOMIC_MEMORY_BARRIER_RELEASE();
-            *once = 1;
+            *once = SPINLOCK_USED;  
+        }
+        else if (retval == SPINLOCK_BUSY)
+        {
+            while (__sync_val_compare_and_swap(once, SPINLOCK_BUSY, SPINLOCK_BUSY) != SPINLOCK_BUSY)
+            {
+               asm volatile("pause");
+            }
         }
-
-        oe_spin_unlock(&_lock);
     }
 
     return OE_OK;
-- 
2.7.4

